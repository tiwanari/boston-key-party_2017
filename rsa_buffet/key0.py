#!/usr/bin/python

import random
from Crypto.Cipher import AES,PKCS1_OAEP
from Crypto.PublicKey import RSA
from base64 import b64decode

import sys, os

def decrypt(private_key, ciphertext):
  """Decrypt a message with a given private key.

  Takes in a private_key generated by Crypto.PublicKey.RSA, which must be of
  size exactly 4096

  If the ciphertext is invalid, return None
  """
  if len(ciphertext) < 512 + 16:
    return None
  msg_header = ciphertext[:512]
  msg_iv = ciphertext[512:512+16]
  msg_body = ciphertext[512+16:]
  try:
    symmetric_key = PKCS1_OAEP.new(private_key).decrypt(msg_header)
  except ValueError:
    return None
  if len(symmetric_key) != 32:
    return None
  return AES.new(symmetric_key,
      mode=AES.MODE_CFB,
      IV=msg_iv).decrypt(msg_body)


if __name__=="__main__":
  e = long(65537)
  n = 879915449270461710485190695384984333346108808238163100635589622985858681174840077891791908299778396399761712011997011746463613908680308851346753645211864161697422478686970556327768137361234129772891278276357122727947947950244829806055158881016642817199313982712486191412897962236823871269648420736534924423486406548812730734126326674748473583138652251560681262492811924913496720278164857004639526764284643238839653952620488132689109774675909664582253141977855536278849104478716737830183823218243357824262208874640011261393661502090701835779701622110255634550577381315794398401099288190684976087038357375439896657810260507762688383926068495576680257990550715767191269347630617636238617346854357508261801349618172932911727280032490944086446846201447378546844207137105811675361827084844211756092591937052615042095862729647068769829375686485423039379493711843213227723084973490186764653471416174456924874481547963600275748770741484515078249187279735372230164334982815930799440541523328018129242237204214842553638367339912643041927393196022387262262204652591800895390943699817163674861716528082374689844511331037929096168076500795597504227135991135809164087623928304090411617142569812170269488375850421090620593124327092827212833845984937
  d = 41050726858788725144704068711408663796111016390560808096087939214173107064590590630546924021950538581141514480014051046200047294288570491676346174988712859520421582138111486274503731937408995708998200761859131524798218576649428065550965840345276491349724621239047050219645933129973739817308543973663053411428806445565023181097566928727946930443053988726166638083399796457314436459564658899426054794723595781051196148132156529375725973664824355699226986001759209334766332559373734316733860864699010735121865566538166752089828952235261315942085199346965936839318100361216433054783726347605464308499317601895226879949565741966697731615772077397827275424823470929959020643609695881567608794988954758809445619133685534087390178559594154878490187196125852882431818409597086225304405761338198029784685779245267409899086492236140906233513690067537071295207542645813457842133443238926765613214215673692502074596716914302689247892918406041363790404176326283669094175171899375622130640917545184622397047035828582044565583876993977539426194221828139296051199398851517720421532451262358966425881836910281853798519746688894463462227000505947861567368862583706133277324353737147495270289182597642378082696479137060460188623031704502149822262121023

  new_key = RSA.construct((n,e,d))

  for i in range(1,6):
    cipher_file = "./rsa-buffet/ciphertext-" + str(i) + ".bin"
    cipher = open(cipher_file).read()
    result = decrypt(new_key, cipher)
    if result:
      print cipher_file + " => "
      print result
      break
